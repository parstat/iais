package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.Language;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiBusinessFunctionOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.function.GetBusinessFunctionQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.function.GetBusinessFunctionsQuery;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.nbs.iais.ms.common.utils.DTOMocks.businessFunction;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.restdocs.request.RequestDocumentation.parameterWithName;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ApiBusinessFunctionOpen.class)
@AutoConfigureRestDocs
public class ApiBusinessFunctionOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void getBusinessFunction() throws Exception {
        final GetBusinessFunctionQuery query = GetBusinessFunctionQuery.create(1L, Language.ENG);
        query.getRead().setData(businessFunction());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/business/functions/{id}", 1)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetBusinessFunctionQuery> argumentCaptor = ArgumentCaptor.forClass(GetBusinessFunctionQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetBusinessFunction() throws Exception{
        final GetBusinessFunctionQuery query = GetBusinessFunctionQuery.create(1L, Language.ENG);
        query.getRead().setData(businessFunction());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/business/functions/{id}", 1)
                .param("language", "en"))
                .andDo(document("get-business-function",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(
                                parameterWithName("id").description("id of the requested agent").attributes()
                        ),
                        responseFields(
                                fieldWithPath("id").description("The id of requested business function").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested business function").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested business function").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested business function").type(JsonFieldType.STRING),
                                fieldWithPath("phase").description("GSBPM phase").type(JsonFieldType.STRING),
                                fieldWithPath("phaseId").description("GSBPM phase id").type(JsonFieldType.NUMBER),
                                fieldWithPath("localId").description("GSBPM sub-phase").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of GSBPM, 5.1").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the entity").type(JsonFieldType.STRING)

                        ))).andReturn();
    }

    @Test
    public void getBusinessFunctions() throws Exception {
        final GetBusinessFunctionsQuery query = GetBusinessFunctionsQuery.create("Specify", 1, null, Language.ENG);
        query.getRead().setData(DTOList.create(businessFunction()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/business/functions", 1)
                .param("language", "en")
                .param("phase", "1")
                .param("name", "Specify")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetBusinessFunctionsQuery> argumentCaptor = ArgumentCaptor.forClass(GetBusinessFunctionsQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetBusinessFunctions() throws Exception{
        final GetBusinessFunctionsQuery query = GetBusinessFunctionsQuery.create("Specify", 1, null, Language.ENG);
        query.getRead().setData(DTOList.create(businessFunction()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/business/functions", 1)
                .param("language", "en")
                .param("phase", "1")
                .param("name", "Specify"))
                .andDo(document("get-business-functions",
                        requestParameters(parameterWithName("language").description("language to get the result"),
                                parameterWithName("phase").description("GSBPM phase").optional(),
                                parameterWithName("name").description("The name to search with").optional()),
                        responseFields(
                                fieldWithPath("[]").description("List of business functions").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested business functions").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].name").description("Name of the requested business functions").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description or the requested business functions").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the requested business functions").type(JsonFieldType.STRING),
                                fieldWithPath("[].phase").description("GSBPM phase").type(JsonFieldType.STRING),
                                fieldWithPath("[].phaseId").description("GSBPM phase id").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].localId").description("GSBPM sub-phase").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of GSBPM, 5.1").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the entity").type(JsonFieldType.STRING)

                        ))).andReturn();
    }

}
