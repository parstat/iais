package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.db.domains.translators.Translator;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.Language;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiLegislativeReferenceOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.legislative.reference.GetLegislativeReferenceQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.legislative.reference.GetLegislativeReferencesQuery;
import com.nbs.iais.ms.meta.referential.db.domains.gsim.LegislativeReferenceEntity;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;

import static com.nbs.iais.ms.common.utils.DTOMocks.legislativeReference;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.restdocs.request.RequestDocumentation.parameterWithName;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ApiLegislativeReferenceOpen.class)
@AutoConfigureRestDocs
public class ApiLegislativeReferenceOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    private LegislativeReferenceEntity getEntity() {
        final LegislativeReferenceEntity legislativeReferenceEntity = new LegislativeReferenceEntity();
        legislativeReferenceEntity.setId(1L);
        legislativeReferenceEntity.setName("Name", Language.ENG);
        legislativeReferenceEntity.setDescription("Description", Language.ENG);
        return legislativeReferenceEntity;
    }


    @Test
    public void getLegislativeReference() throws Exception {
        final GetLegislativeReferenceQuery query = GetLegislativeReferenceQuery.create(1L, Language.ENG);
        Translator.translate(getEntity(), Language.ENG).ifPresent(query.getRead()::setData);
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/legislative/references/{id}", 1)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetLegislativeReferenceQuery> argumentCaptor = ArgumentCaptor.forClass(GetLegislativeReferenceQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetLegislativeReference() throws Exception{
        final GetLegislativeReferenceQuery query = GetLegislativeReferenceQuery.create(1L, Language.ENG);
        query.getRead().setData(legislativeReference());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/legislative/references/{id}", 1)
                .param("language", "en"))
                .andDo(document("get-legislative-reference",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(
                                parameterWithName("id").description("id of the requested legislative reference").attributes()
                        ),
                        responseFields(
                                fieldWithPath("id").description("The id of requested legislative reference").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("externalLink").description("The official link of the law in governmental website").type(JsonFieldType.STRING),
                                fieldWithPath("type").description("Type of legislative reference: REGULATION,\n" +
                                        "    LAW,\n" +
                                        "    CODE,\n" +
                                        "    GOVERNMENTAL_DECISION,\n" +
                                        "    AMENDMENT,").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("The legislative reference number").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("approval").description("Approval date of the legislative reference").type(JsonFieldType.STRING)

                        ))).andReturn();
    }

    @Test
    public void getLegislativeReferencesByName() throws Exception {
        final GetLegislativeReferencesQuery query = GetLegislativeReferencesQuery.create(null, "name", Language.ENG);
        Translator.translateLegislativeReferences(Collections.singleton(getEntity()), Language.ENG).ifPresent(query.getRead()::setData);
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/legislative/references")
                .param("language", "en")
                .param("name", "name")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetLegislativeReferenceQuery> argumentCaptor = ArgumentCaptor.forClass(GetLegislativeReferenceQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetLegislativeReferencesByName() throws Exception{
        final GetLegislativeReferencesQuery query = GetLegislativeReferencesQuery.create(null, "name", Language.ENG);
        query.getRead().setData(DTOList.create(legislativeReference()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/legislative/references")
                .param("language", "en")
                .param("name", query.getName()))
                .andDo(document("get-legislative-references",
                        requestParameters(parameterWithName("language").description("language to get the result"),
                                parameterWithName("name").description("The name to search with").optional(),
                                parameterWithName("type").description("Type of legislation reference to get list of").optional()),
                        responseFields(
                                fieldWithPath("[]").description("List of legislative references").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested legislative references").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].name").description("Name of the requested legislative references").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description or the requested legislative references").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the requested legislative references").type(JsonFieldType.STRING),
                                fieldWithPath("[].externalLink").description("The official link of the legislative references in governmental website").type(JsonFieldType.STRING),
                                fieldWithPath("[].type").description("Type of legislative reference: REGULATION,\n" +
                                        "    LAW,\n" +
                                        "    CODE,\n" +
                                        "    GOVERNMENTAL_DECISION,\n" +
                                        "    AMENDMENT,").type(JsonFieldType.STRING),
                                fieldWithPath("[].localId").description("The legislative references number").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of the legislative references").type(JsonFieldType.STRING),
                                fieldWithPath("[].approval").description("Approval date of the legislative references").type(JsonFieldType.STRING)

                        ))).andReturn();
    }

}
