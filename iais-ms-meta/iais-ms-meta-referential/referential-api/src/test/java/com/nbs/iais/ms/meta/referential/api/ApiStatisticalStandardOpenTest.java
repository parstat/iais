package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.Language;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiStatisticalStandardOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.statisical.standard.GetStatisticalStandardQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.statisical.standard.GetStatisticalStandardsQuery;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.nbs.iais.ms.common.utils.DTOMocks.statisticalStandard;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.restdocs.request.RequestDocumentation.parameterWithName;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ApiStatisticalStandardOpen.class)
@AutoConfigureRestDocs
public class ApiStatisticalStandardOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void getStatisticalStandardByIdTest() throws Exception {

        final GetStatisticalStandardQuery query = GetStatisticalStandardQuery.create(1L, Language.ENG);
        query.getRead().setData(statisticalStandard());

        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/statistical/standards/{id}", 1)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetStatisticalStandardQuery> argumentCaptor = ArgumentCaptor.forClass(GetStatisticalStandardQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetStatisticalStandard() throws Exception{

        final GetStatisticalStandardQuery query = GetStatisticalStandardQuery.create(1L, Language.ENG);
        query.getRead().setData(statisticalStandard());

        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/statistical/standards/{id}", 1)
                .param("language", "en"))
                .andDo(document("get-statistical-standard",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(
                                parameterWithName("id").description("id of the requested statistical standard").attributes()
                        ),
                        responseFields(
                                fieldWithPath("id").description("The id of requested statistical standard").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("externalLink").description("The official link of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("type").description("Type of statistical standard: CLASSIFICATIONS,\n" +
                                        "    CONCEPTS,\n" +
                                        "    DEFINITIONS,\n" +
                                        "    METHODOLOGIES,\n" +
                                        "    PROCEDURES,\n" +
                                        "    RECOMMENDATIONS,\n" +
                                        "    FRAMEWORK").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("The local id of the standard").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of the statistical standard").type(JsonFieldType.STRING)

                        ))).andReturn();
    }

    @Test
    public void getStatisticalStandardsTest() throws Exception {

        final GetStatisticalStandardsQuery query = GetStatisticalStandardsQuery.create(null, "Name", Language.ENG);
        query.getRead().setData(DTOList.create(statisticalStandard()));

        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/statistical/standards")
                .param("language", "en")
                .param("name", "Name")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetStatisticalStandardQuery> argumentCaptor = ArgumentCaptor.forClass(GetStatisticalStandardQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetStatisticalStandards() throws Exception{

        final GetStatisticalStandardsQuery query = GetStatisticalStandardsQuery.create(null, "Name", Language.ENG);
        query.getRead().setData(DTOList.create(statisticalStandard()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/statistical/standards")
                .param("language", "en")
                .param("name", query.getName()))
                .andDo(document("get-statistical-standards",
                        requestParameters(parameterWithName("language").description("language to get the result"),
                                parameterWithName("name").description("Name to search for a statistical standard").optional(),
                                parameterWithName("type").description("Statistical standard type to filter").optional()),
                        responseFields(
                                fieldWithPath("[]").description("List of returnend statistical standards").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested statistical standard").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].name").description("Name of the requested statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description or the requested statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the requested statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].externalLink").description("The official link of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].type").description("Type of statistical standard: CLASSIFICATIONS,\n" +
                                        "    CONCEPTS,\n" +
                                        "    DEFINITIONS,\n" +
                                        "    METHODOLOGIES,\n" +
                                        "    PROCEDURES,\n" +
                                        "    RECOMMENDATIONS,\n" +
                                        "    FRAMEWORK").type(JsonFieldType.STRING),
                                fieldWithPath("[].localId").description("The local id of the standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of the statistical standard").type(JsonFieldType.STRING)

                        ))).andReturn();
    }

}
