package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.Language;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiBusinessServiceOpen;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiProcessDocumentOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.service.GetBusinessServiceQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.service.GetBusinessServicesQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.process.document.GetProcessDocumentQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.process.document.GetProcessDocumentsQuery;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.nbs.iais.ms.common.utils.DTOMocks.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ApiProcessDocumentOpen.class)
@AutoConfigureRestDocs
public class ApiProcessDocumentOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void getProcessDocuments() throws Exception{
        final GetProcessDocumentsQuery query = GetProcessDocumentsQuery.create(1L,Language.ENG);
        query.getRead().setData(DTOList.create(processDocument()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/process/documents")
                .param("language", "en")
                .param("processDocumentation", query.getProcessDocumentation().toString())
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());
        ArgumentCaptor<GetProcessDocumentsQuery> argumentCaptor = ArgumentCaptor.forClass(GetProcessDocumentsQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void docuemntGetProcessDocuments() throws Exception {
        final GetProcessDocumentsQuery query = GetProcessDocumentsQuery.create(1L,Language.ENG);
        query.getRead().setData(DTOList.create(processDocument()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/process/documents")
                .param("language", "en")
                .param("processDocumentation", query.getProcessDocumentation().toString())
                .accept(MediaType.APPLICATION_JSON))
                .andDo(document("get-process-documents",
                        requestParameters(
                                parameterWithName("language").description("language to get the result"),
                                parameterWithName("processDocumentation").description("Process documentation of the requested process document")
                        ),
                        responseFields(
                                fieldWithPath("[]").description("list of requested process document").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested process document").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].link").description("Link of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("[].localId").description("LocalId of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("[].name").description("Name of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("[].mediaType").description("MediaType of requested process document").type(JsonFieldType.STRING)
                        ))).andReturn();
    }

    @Test
    public void getProcessDocument() throws Exception {
        final GetProcessDocumentQuery query = GetProcessDocumentQuery.create(1L);
        query.getRead().setData(processDocument());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/process/documents/{id}", 1L)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());
        ArgumentCaptor<GetProcessDocumentQuery> argumentCaptor = ArgumentCaptor.forClass(GetProcessDocumentQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetProcessDocument() throws Exception {
        final GetProcessDocumentQuery query = GetProcessDocumentQuery.create(1L);
        query.getRead().setData(processDocument());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/process/documents/{id}", 1L)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(document("get-process-document",
                        requestParameters(
                                parameterWithName("language").description("language to get the result")
                        ),
                        pathParameters(parameterWithName("id").description("The id of requested process documentation")),
                        responseFields(
                                fieldWithPath("id").description("The id of requested process document").type(JsonFieldType.NUMBER),
                                fieldWithPath("link").description("Link of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("LocalId of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("name").description("Name of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description of requested process document").type(JsonFieldType.STRING),
                                fieldWithPath("mediaType").description("MediaType of requested process document").type(JsonFieldType.STRING)
                        ))).andReturn();
    }
}
