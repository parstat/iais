package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.dto.wrappers.DTOBoolean;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.Language;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiProcessMethodClosed;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiProcessMethodOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.commands.process.method.CreateProcessMethodCommand;
import com.nbs.iais.ms.meta.referential.common.messageing.commands.process.method.DeleteProcessMethodCommand;
import com.nbs.iais.ms.meta.referential.common.messageing.commands.process.method.UpdateProcessMethodCommand;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.process.document.GetProcessDocumentQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.process.method.GetProcessMethodQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.process.method.GetProcessMethodsQuery;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;

import static com.nbs.iais.ms.common.utils.DTOMocks.processDocument;
import static com.nbs.iais.ms.common.utils.DTOMocks.processMethod;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.restdocs.headers.HeaderDocumentation.headerWithName;
import static org.springframework.restdocs.headers.HeaderDocumentation.requestHeaders;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@ExtendWith(SpringExtension.class)
@WebMvcTest(ApiProcessMethodOpen.class)
@AutoConfigureRestDocs
public class ApiProcessMethodOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void getProcessMethod() throws Exception {
        final GetProcessMethodQuery query = GetProcessMethodQuery.create(1L, Language.ENG);
        query.getRead().setData(processMethod());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/process/methods/{id}", 1L)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());
        ArgumentCaptor<GetProcessMethodQuery> argumentCaptor = ArgumentCaptor.forClass(GetProcessMethodQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }
    @Test
    public void documentGetProcessMethod() throws Exception {
        final GetProcessMethodQuery query = GetProcessMethodQuery.create(1L, Language.ENG);
        query.getRead().setData(processMethod());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/process/methods/{id}", 1L)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(document("get-process-method",
                        requestParameters(
                                parameterWithName("language").description("language to get the result")
                        ),
                        pathParameters(parameterWithName("id").description("The id of requested process method")),
                        responseFields(
                                fieldWithPath("id").description("The id of requested process method").type(JsonFieldType.NUMBER),
                                fieldWithPath("localId").description("LocalId of requested process method").type(JsonFieldType.STRING),
                                fieldWithPath("name").description("Name of requested process method").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of requested process method").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description of requested process method").type(JsonFieldType.STRING)
                        ))).andReturn();
    }

    @Test
    public void getProcessMethods() throws Exception {
        final GetProcessMethodsQuery query = GetProcessMethodsQuery.create("name", Language.ENG);
        query.getRead().setData(DTOList.create(processMethod()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/process/methods")
                .param("language", "en")
                .param("name", "name")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());
        ArgumentCaptor<GetProcessMethodsQuery> argumentCaptor = ArgumentCaptor.forClass(GetProcessMethodsQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetProcessMethods() throws Exception {
        final GetProcessMethodsQuery query = GetProcessMethodsQuery.create("name", Language.ENG);
        query.getRead().setData(DTOList.create(processMethod()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/process/methods")
                .param("language", "en")
                .param("name", "name")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(document("get-process-methods",
                        requestParameters(
                                parameterWithName("language").description("language to get the result"),
                                parameterWithName("name").description("name of the requested process methods")
                        ),
                        responseFields(
                                fieldWithPath("[]").description("list of requested process document").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested process method").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].localId").description("LocalId of requested process method").type(JsonFieldType.STRING),
                                fieldWithPath("[].name").description("Name of requested process method").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of requested process method").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description of requested process method").type(JsonFieldType.STRING)
                        ))).andReturn();
    }
}
