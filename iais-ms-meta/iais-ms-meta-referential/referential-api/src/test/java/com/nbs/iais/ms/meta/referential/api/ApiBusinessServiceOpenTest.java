package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.Language;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiBusinessFunctionOpen;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiBusinessServiceOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.function.GetBusinessFunctionQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.function.GetBusinessFunctionsQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.service.GetBusinessServiceQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.service.GetBusinessServicesQuery;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.nbs.iais.ms.common.utils.DTOMocks.businessFunction;
import static com.nbs.iais.ms.common.utils.DTOMocks.businessService;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ApiBusinessServiceOpen.class)
@AutoConfigureRestDocs
public class ApiBusinessServiceOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void getBusinessService() throws Exception {
        final GetBusinessServiceQuery query = GetBusinessServiceQuery.create(1L, Language.ENG);
        query.getRead().setData(businessService());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/close/referential/business/services/{id}", 1)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetBusinessServiceQuery> argumentCaptor = ArgumentCaptor.forClass(GetBusinessServiceQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetBusinessService() throws Exception {
        final GetBusinessServiceQuery query = GetBusinessServiceQuery.create(1L, Language.ENG);
        query.getRead().setData(businessService());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/close/referential/business/services/{id}", 1)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(document("get-business-service",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(parameterWithName("id").description("id of the requested business service")),
                        responseFields(
                                fieldWithPath("id").description("The id of requested business service").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("LocalId of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("interfaces").description("Interfaces of the requested business service").type(JsonFieldType.ARRAY)
                        ))).andReturn();
    }

    @Test
    public void getBusinessServiceVersion() throws Exception {
        final GetBusinessServiceQuery query = GetBusinessServiceQuery.create(1L, Language.ENG);
        query.getRead().setData(businessService());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/close/referential/business/services/local/{local_id}/versions/{version}", "localId", "1.0")
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());
        ArgumentCaptor<GetBusinessServiceQuery> argumentCaptor = ArgumentCaptor.forClass(GetBusinessServiceQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetBusinessServiceVersion() throws Exception {
        final GetBusinessServiceQuery query = GetBusinessServiceQuery.create(1L, Language.ENG);
        query.getRead().setData(businessService());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/close/referential/business/services/local/{local_id}/versions/{version}", "local_id", "1.0")
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(document("get-business-service-version",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(
                                parameterWithName("local_id").description("localId of the requested business service"),
                                parameterWithName("version").description("Version of the requested business service")
                        ),
                        responseFields(
                                fieldWithPath("id").description("The id of requested business service").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("LocalId of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("interfaces").description("Interfaces of the requested business service").type(JsonFieldType.ARRAY)
                        ))).andReturn();
    }

    @Test
    public void getBusinessServices() throws Exception {
        final GetBusinessServicesQuery query = GetBusinessServicesQuery.create("localId", "Software", Language.ENG);
        query.getRead().setData(DTOList.create(businessService()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/close/referential/business/services")
                .param("language", "en")
                .param("name", query.getName())
                .param("local_id", query.getLocalId())
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());
        ArgumentCaptor<GetBusinessServicesQuery> argumentCaptor = ArgumentCaptor.forClass(GetBusinessServicesQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetBusinessServices() throws Exception {
        final GetBusinessServicesQuery query = GetBusinessServicesQuery.create("localId", "Software", Language.ENG);
        query.getRead().setData(DTOList.create(businessService()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/close/referential/business/services")
                .param("language", "en")
                .param("name", query.getName())
                .param("local_id", query.getLocalId())
                .accept(MediaType.APPLICATION_JSON))
                .andDo(document("get-business-services",
                        requestParameters(
                                parameterWithName("language").description("language to get the result"),
                                parameterWithName("name").description("Name of the requested business service"),
                                parameterWithName("local_id").description("LocalId of the requested business service")
                        ),
                        responseFields(
                                fieldWithPath("[]").description("List of business functions").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested business service").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].name").description("Name of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description or the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("[].localId").description("LocalId of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of the requested business service").type(JsonFieldType.STRING),
                                fieldWithPath("[].interfaces").description("Interfaces of the requested business service").type(JsonFieldType.ARRAY)
                        ))).andReturn();
    }
}
