package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.Language;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiProcessDocumentationOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.process.documentation.GetProcessDocumentationQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.process.documentation.GetProcessDocumentationsQuery;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.nbs.iais.ms.common.utils.DTOMocks.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.*;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ApiProcessDocumentationOpen.class)
@AutoConfigureRestDocs
public class ApiProcessDocumentationOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void getProcessDocumentations() throws Exception {
        final GetProcessDocumentationsQuery query = GetProcessDocumentationsQuery.create(Language.ENG);
        query.getRead().setData(DTOList.create(processDocumentation()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/process/documentations")
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetProcessDocumentationsQuery> argumentCaptor = ArgumentCaptor.forClass(GetProcessDocumentationsQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetProcessDocumentations() throws Exception {
        final GetProcessDocumentationsQuery query = GetProcessDocumentationsQuery.create(Language.ENG);
        query.getRead().setData(DTOList.create(processDocumentation()));
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/process/documentations")
                .param("language", "en"))
                .andDo(document("get-process-documentations",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        responseFields(
                                fieldWithPath("[]").description("list og process (GSBPM sub-phase) documentations").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested process documentation").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].description").description("Description of the requested process documentation").type(JsonFieldType.STRING),
                                fieldWithPath("[].businessFunction").description("Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].businessFunction.id").description("Id of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].businessFunction.link").description("Link of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].businessFunction.localId").description("Local id of Business Function (GSBPM sub-phase number) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalProgram").description("Statistical Program being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].statisticalProgram.id").description("Id of Statistical Program being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].statisticalProgram.name").description("Name of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalProgram.acronym").description("Acronym of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalProgram.description").description("Description of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalProgram.link").description("Link of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].frequency").description("Frequency of requested process documentation").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer").description("List of maintainer of the process documentation").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].maintainer.id").description("The id of requested maintainer").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].maintainer.link").description("Link of requested maintainer").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer.name").description("Name of requested maintainer").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer.type").description("Type of requested maintainer").type(JsonFieldType.STRING)
                                ))).andReturn();
    }

    @Test
    public void getProcessDocumentation() throws Exception{
        final GetProcessDocumentationQuery query = GetProcessDocumentationQuery.create(1L);
        query.getRead().setData(processDocumentation());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/process/documentations/{id}", 1L)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());
        ArgumentCaptor<GetProcessDocumentationQuery> argumentCaptor = ArgumentCaptor.forClass(GetProcessDocumentationQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetProcessDocumentation() throws Exception {
        final GetProcessDocumentationQuery query = GetProcessDocumentationQuery.create(1L);
        query.getRead().setData(processDocumentation());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/process/documentations/{id}", 1L)
                .param("language", "en"))
                .andDo(document("get-process-documentation",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(parameterWithName("id").description("The id of requested process documentation")),
                        responseFields(
                                fieldWithPath("id").description("The id of requested process documentation").type(JsonFieldType.NUMBER),
                                fieldWithPath("description").description("Description of the requested process documentation").type(JsonFieldType.STRING),
                                fieldWithPath("businessFunction").description("Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("businessFunction.id").description("Id of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("businessFunction.link").description("Link of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("businessFunction.localId").description("Local id of Business Function (GSBPM sub-phase number) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalProgram").description("Statistical Program being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("statisticalProgram.id").description("Id of Statistical Program being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("statisticalProgram.name").description("Name of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalProgram.acronym").description("Acronym of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalProgram.description").description("Description of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalProgram.link").description("Link of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("frequency").description("Frequency of requested process documentation").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer").description("List of maintainer of the process documentation").type(JsonFieldType.OBJECT),
                                fieldWithPath("maintainer.id").description("The id of requested maintainer").type(JsonFieldType.NUMBER),
                                fieldWithPath("maintainer.link").description("Link of requested maintainer").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.name").description("Name of requested maintainer").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.type").description("Type of requested maintainer").type(JsonFieldType.STRING)
                        )
                        )).andReturn();
    }
}
