package com.nbs.iais.ms.meta.referential.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.dto.wrappers.DTOList;
import com.nbs.iais.ms.common.enums.*;
import com.nbs.iais.ms.meta.referential.api.controllers.ApiStatisticalProgramOpen;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.agent.GetAgentQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.agent.GetAgentsQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.function.GetBusinessFunctionQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.business.function.GetBusinessFunctionsQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.statistical.program.GetStatisticalProgramQuery;
import com.nbs.iais.ms.meta.referential.common.messageing.queries.statistical.program.GetStatisticalProgramsQuery;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static com.nbs.iais.ms.common.utils.DTOMocks.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.restdocs.request.RequestDocumentation.parameterWithName;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;



import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@WebMvcTest(ApiStatisticalProgramOpen.class)
@AutoConfigureRestDocs
public class ApiStatisticalProgramOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void getStatisticalProgramById() throws Exception {
        final GetStatisticalProgramQuery query = GetStatisticalProgramQuery.create(1L, Language.ENG);
        query.getRead().setData(statisticalProgram());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/statistical/programs/{id}", 1)
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetStatisticalProgramQuery> argumentCaptor = ArgumentCaptor.forClass(GetStatisticalProgramQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetStatisticalProgramById() throws Exception{
        final GetStatisticalProgramQuery query = GetStatisticalProgramQuery.create(1L, Language.ENG);
        query.getRead().setData(statisticalProgram());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/statistical/programs/{id}", 1)
                .param("language", "en"))
                .andDo(document("get-statistical-program",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(
                                        parameterWithName("id").description("id of the requested statistical program").attributes()
                                ),
                        responseFields(
                                fieldWithPath("id").description("The id of requested statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("acronym").description("Acronym of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("The local id of the statistical program"),
                                fieldWithPath("budget").description("Budget of statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("dateInitiated").description("The initiated date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("dateEnded").description("The ended date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("sourceOfFunding").description("Source of Funding of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the entity").type(JsonFieldType.STRING),
                                fieldWithPath("programStatus").description("Status of the statistical program: CURRENT, COMPLETED, ").type(JsonFieldType.STRING),
                                fieldWithPath("contact").description("Contact agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("contact.id").description("id of the contact agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("contact.name").description("Name of the contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("contact.type").description("Type of contact agent, normally INDIVIDUAL").type(JsonFieldType.STRING),
                                fieldWithPath("contact.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("owner").description("Owner agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("owner.id").description("Id of the owner agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("owner.name").description("Name of the owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("owner.type").description("Type of owner agent, normally ORGANIZATION").type(JsonFieldType.STRING),
                                fieldWithPath("owner.link").description("Client link of owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer").description("Maintainer agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("maintainer.id").description("Id of the maintainer agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("maintainer.name").description("Name of the maintainer agent").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.type").description("Type of maintainer agent, normally DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[]").description("List of statistical standards of the statistical program").type(JsonFieldType.ARRAY),
                                fieldWithPath("statisticalStandards[].id").description("Id of the statistical standard").type(JsonFieldType.NUMBER),
                                fieldWithPath("statisticalStandards[].name").description("Name of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].description").description("Description of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].type").description("Type of statistical standard:  CLASSIFICATIONS, CONCEPTS, DEFINITIONS, METHODOLOGIES, PROCEDURES, RECOMMENDATIONS, FRAMEWORK").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].version").description("Version of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].link").description("Client link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].externalLink").description("External link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].localId").description("Local id of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[]").description("List of statistical standards of the legislative reference").type(JsonFieldType.ARRAY),
                                fieldWithPath("legislativeReferences[].id").description("Id of the legislative reference").type(JsonFieldType.NUMBER),
                                fieldWithPath("legislativeReferences[].name").description("Name of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].description").description("Description of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].type").description("Type of legislative reference:   REGULATION, LAW, CODE, GOVERNMENTAL_DECISION, AMENDMENT,").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].version").description("Version of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].link").description("Client link of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].externalLink").description("The governmental link of the law").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].approval").description("First approval date of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].localId").description("Number of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[]").description("List of process (GSBPM sub-phases) documentations").type(JsonFieldType.ARRAY),
                                fieldWithPath("processDocumentations[].id").description("Id of process documentation").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].description").description("Description of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].frequency").description("Frequency of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].link").description("Client link of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction").description("Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("processDocumentations[].businessFunction.id").description("Id of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.link").description("Link of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.localId").description("Local id of Business Function (GSBPM sub-phase number) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram").description("Statistical Program being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("processDocumentations[].statisticalProgram.id").description("Id of Statistical Program being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].statisticalProgram.name").description("Name of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.acronym").description("Acronym of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.description").description("Description of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.link").description("Link of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[]").description("Maintainer of Process for statistical program, usually the responsible DIVISION agent").type(JsonFieldType.ARRAY),
                                fieldWithPath("processDocumentations[].maintainers[].id").description("Id of the maintainer agent of the process for statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].maintainers[].name").description("Name of the maintainer agent of the process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[].type").description("Type of maintainer agent of the process for statistical program, usually DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[].link").description("Client link of contact agent of the process for statistical program").type(JsonFieldType.STRING)


                        ))).andReturn();
    }

    @Test
    public void getStatisticalProgramLatestVersion() throws Exception {
        final GetStatisticalProgramQuery query = GetStatisticalProgramQuery.create("lfs", Language.ENG);
        query.getRead().setData(statisticalProgram());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/statistical/programs/{local_id}/latest", "lfs")
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetStatisticalProgramQuery> argumentCaptor = ArgumentCaptor.forClass(GetStatisticalProgramQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetStatisticalProgramLatestVersion() throws Exception{
        final GetStatisticalProgramQuery query = GetStatisticalProgramQuery.create(1L, Language.ENG);
        query.getRead().setData(statisticalProgram());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/statistical/programs/{local_id}/latest", "lfs")
                .param("language", "en"))
                .andDo(document("get-latest-statistical-program",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(
                                parameterWithName("local_id").description("Local id of the requested statistical program").attributes()
                        ),
                        responseFields(
                                fieldWithPath("id").description("The id of requested statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("acronym").description("Acronym of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("The local id of the statistical program"),
                                fieldWithPath("budget").description("Budget of statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("dateInitiated").description("The initiated date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("dateEnded").description("The ended date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("sourceOfFunding").description("Source of Funding of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the entity").type(JsonFieldType.STRING),
                                fieldWithPath("programStatus").description("Status of the statistical program: CURRENT, COMPLETED, ").type(JsonFieldType.STRING),
                                fieldWithPath("contact").description("Contact agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("contact.id").description("id of the contact agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("contact.name").description("Name of the contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("contact.type").description("Type of contact agent, normally INDIVIDUAL").type(JsonFieldType.STRING),
                                fieldWithPath("contact.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("owner").description("Owner agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("owner.id").description("Id of the owner agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("owner.name").description("Name of the owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("owner.type").description("Type of owner agent, normally ORGANIZATION").type(JsonFieldType.STRING),
                                fieldWithPath("owner.link").description("Client link of owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer").description("Maintainer agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("maintainer.id").description("Id of the maintainer agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("maintainer.name").description("Name of the maintainer agent").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.type").description("Type of maintainer agent, normally DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[]").description("List of statistical standards of the statistical program").type(JsonFieldType.ARRAY),
                                fieldWithPath("statisticalStandards[].id").description("Id of the statistical standard").type(JsonFieldType.NUMBER),
                                fieldWithPath("statisticalStandards[].name").description("Name of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].description").description("Description of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].type").description("Type of statistical standard:  CLASSIFICATIONS, CONCEPTS, DEFINITIONS, METHODOLOGIES, PROCEDURES, RECOMMENDATIONS, FRAMEWORK").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].version").description("Version of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].link").description("Client link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].externalLink").description("External link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].localId").description("Local id of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[]").description("List of statistical standards of the legislative reference").type(JsonFieldType.ARRAY),
                                fieldWithPath("legislativeReferences[].id").description("Id of the legislative reference").type(JsonFieldType.NUMBER),
                                fieldWithPath("legislativeReferences[].name").description("Name of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].description").description("Description of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].type").description("Type of legislative reference:   REGULATION, LAW, CODE, GOVERNMENTAL_DECISION, AMENDMENT,").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].version").description("Version of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].link").description("Client link of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].externalLink").description("The governmental website link of the law").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].approval").description("First approval date of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].localId").description("Number of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[]").description("List of process (GSBPM sub-phases) documentations").type(JsonFieldType.ARRAY),
                                fieldWithPath("processDocumentations[].id").description("Id of process documentation").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].description").description("Description of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].frequency").description("Frequency of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].link").description("Client link of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction").description("Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("processDocumentations[].businessFunction.id").description("Id of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.link").description("Link of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.localId").description("Local id of Business Function (GSBPM sub-phase number) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram").description("Statistical Program being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("processDocumentations[].statisticalProgram.id").description("Id of Statistical Program being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].statisticalProgram.name").description("Name of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.acronym").description("Acronym of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.description").description("Description of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.link").description("Link of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[]").description("Maintainer of Process for statistical program, usually the responsible DIVISION agent").type(JsonFieldType.ARRAY),
                                fieldWithPath("processDocumentations[].maintainers[].id").description("Id of the maintainer agent of the process for statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].maintainers[].name").description("Name of the maintainer agent of the process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[].type").description("Type of maintainer agent of the process for statistical program, usually DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[].link").description("Client link of contact agent of the process for statistical program").type(JsonFieldType.STRING)


                        ))).andReturn();
    }

    @Test
    public void getStatisticalProgramVersion() throws Exception {
        final GetStatisticalProgramQuery query = GetStatisticalProgramQuery.create("lfs", Language.ENG);
        query.getRead().setData(statisticalProgram());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/statistical/programs/{local_id}/versions/{version}", "lfs", "1.0")
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetStatisticalProgramQuery> argumentCaptor = ArgumentCaptor.forClass(GetStatisticalProgramQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetStatisticalProgramVersion() throws Exception{
        final GetStatisticalProgramQuery query = GetStatisticalProgramQuery.create(1L, Language.ENG);
        query.getRead().setData(statisticalProgram());
        when(iaisGateway.sendQuery(any(), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/statistical/programs/{local_id}/versions/{version}", "lfs", "1.0")
                .param("language", "en"))
                .andDo(document("get-version-statistical-program",
                        requestParameters(parameterWithName("language").description("language to get the result")),
                        pathParameters(
                                parameterWithName("local_id").description("Local id of the requested statistical program").attributes(),
                                parameterWithName("version").description("The specific version of statistical program requested").attributes()
                        ),
                        responseFields(
                                fieldWithPath("id").description("The id of requested statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("name").description("Name of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("description").description("Description or the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("acronym").description("Acronym of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("version").description("Version of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("localId").description("The local id of the statistical program"),
                                fieldWithPath("budget").description("Budget of statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("dateInitiated").description("The initiated date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("dateEnded").description("The ended date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("sourceOfFunding").description("Source of Funding of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("link").description("Client link of the entity").type(JsonFieldType.STRING),
                                fieldWithPath("programStatus").description("Status of the statistical program: CURRENT, COMPLETED, ").type(JsonFieldType.STRING),
                                fieldWithPath("contact").description("Contact agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("contact.id").description("id of the contact agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("contact.name").description("Name of the contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("contact.type").description("Type of contact agent, normally INDIVIDUAL").type(JsonFieldType.STRING),
                                fieldWithPath("contact.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("owner").description("Owner agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("owner.id").description("Id of the owner agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("owner.name").description("Name of the owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("owner.type").description("Type of owner agent, normally ORGANIZATION").type(JsonFieldType.STRING),
                                fieldWithPath("owner.link").description("Client link of owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer").description("Maintainer agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("maintainer.id").description("Id of the maintainer agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("maintainer.name").description("Name of the maintainer agent").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.type").description("Type of maintainer agent, normally DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("maintainer.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[]").description("List of statistical standards of the statistical program").type(JsonFieldType.ARRAY),
                                fieldWithPath("statisticalStandards[].id").description("Id of the statistical standard").type(JsonFieldType.NUMBER),
                                fieldWithPath("statisticalStandards[].name").description("Name of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].description").description("Description of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].type").description("Type of statistical standard:  CLASSIFICATIONS, CONCEPTS, DEFINITIONS, METHODOLOGIES, PROCEDURES, RECOMMENDATIONS, FRAMEWORK").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].version").description("Version of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].link").description("Client link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].externalLink").description("External link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("statisticalStandards[].localId").description("Local id of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[]").description("List of statistical standards of the legislative reference").type(JsonFieldType.ARRAY),
                                fieldWithPath("legislativeReferences[].id").description("Id of the legislative reference").type(JsonFieldType.NUMBER),
                                fieldWithPath("legislativeReferences[].name").description("Name of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].description").description("Description of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].type").description("Type of legislative reference:   REGULATION, LAW, CODE, GOVERNMENTAL_DECISION, AMENDMENT,").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].version").description("Version of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].link").description("Client link of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].externalLink").description("The governmental website link of the law").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].approval").description("First approval date of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("legislativeReferences[].localId").description("Number of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[]").description("List of process (GSBPM sub-phases) documentations").type(JsonFieldType.ARRAY),
                                fieldWithPath("processDocumentations[].id").description("Id of process documentation").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].description").description("Description of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].frequency").description("Frequency of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].link").description("Client link of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction").description("Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("processDocumentations[].businessFunction.id").description("Id of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.link").description("Link of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.localId").description("Local id of Business Function (GSBPM sub-phase number) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram").description("Statistical Program being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("processDocumentations[].statisticalProgram.id").description("Id of Statistical Program being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].statisticalProgram.name").description("Name of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.acronym").description("Acronym of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.description").description("Description of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].statisticalProgram.link").description("Link of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[]").description("Maintainer of Process for statistical program, usually the responsible DIVISION agent").type(JsonFieldType.ARRAY),
                                fieldWithPath("processDocumentations[].maintainers[].id").description("Id of the maintainer agent of the process for statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("processDocumentations[].maintainers[].name").description("Name of the maintainer agent of the process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[].type").description("Type of maintainer agent of the process for statistical program, usually DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("processDocumentations[].maintainers[].link").description("Client link of contact agent of the process for statistical program").type(JsonFieldType.STRING)



                        ))).andReturn();
    }

    @Test
    public void getStatisticalPrograms() throws Exception {
        final GetStatisticalProgramsQuery query = GetStatisticalProgramsQuery.create("Labor", null, Language.ENG);
        query.getRead().setData(DTOList.create(statisticalProgram()));
        when(iaisGateway.sendQuery(any(GetStatisticalProgramsQuery.class), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/statistical/programs")
                .param("language", "en")
                .param("name", "Labor")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetStatisticalProgramsQuery> argumentCaptor = ArgumentCaptor.forClass(GetStatisticalProgramsQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetStatisticalPrograms() throws Exception{
        final GetStatisticalProgramsQuery query = GetStatisticalProgramsQuery.create("Labor", null, Language.ENG);
        query.getRead().setData(DTOList.create(statisticalProgram()));
        when(iaisGateway.sendQuery(any(GetStatisticalProgramsQuery.class), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/statistical/programs")
                .param("language", "en")
                .param("name", "Labor"))
                .andDo(document("get-statistical-programs",
                        requestParameters(parameterWithName("language").description("language to get the result"),
                                parameterWithName("name").description("The name to search with").optional()),
                        responseFields(
                                fieldWithPath("[]").description("List of business functions").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].name").description("Name of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description or the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].acronym").description("Acronym of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].localId").description("The local id of the statistical program"),
                                fieldWithPath("[].budget").description("Budget of statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].dateInitiated").description("The initiated date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].dateEnded").description("The ended date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].sourceOfFunding").description("Source of Funding of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the entity").type(JsonFieldType.STRING),
                                fieldWithPath("[].programStatus").description("Status of the statistical program: CURRENT, COMPLETED, ").type(JsonFieldType.STRING),
                                fieldWithPath("[].contact").description("Contact agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].contact.id").description("id of the contact agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].contact.name").description("Name of the contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].contact.type").description("Type of contact agent, normally INDIVIDUAL").type(JsonFieldType.STRING),
                                fieldWithPath("[].contact.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].owner").description("Owner agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].owner.id").description("Id of the owner agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].owner.name").description("Name of the owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].owner.type").description("Type of owner agent, normally ORGANIZATION").type(JsonFieldType.STRING),
                                fieldWithPath("[].owner.link").description("Client link of owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer").description("Maintainer agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].maintainer.id").description("Id of the maintainer agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].maintainer.name").description("Name of the maintainer agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer.type").description("Type of maintainer agent, normally DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[]").description("List of statistical standards of the statistical program").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].statisticalStandards[].id").description("Id of the statistical standard").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].statisticalStandards[].name").description("Name of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].description").description("Description of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].type").description("Type of statistical standard:  CLASSIFICATIONS, CONCEPTS, DEFINITIONS, METHODOLOGIES, PROCEDURES, RECOMMENDATIONS, FRAMEWORK").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].version").description("Version of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].link").description("Client link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].externalLink").description("External link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].localId").description("Local id of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[]").description("List of statistical standards of the legislative reference").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].legislativeReferences[].id").description("Id of the legislative reference").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].legislativeReferences[].name").description("Name of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].description").description("Description of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].type").description("Type of legislative reference:   REGULATION, LAW, CODE, GOVERNMENTAL_DECISION, AMENDMENT,").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].version").description("Version of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].link").description("Client link of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].externalLink").description("The governmental website link of the law").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].approval").description("First approval date of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].localId").description("Number of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[]").description("List of process (GSBPM sub-phases) documentations").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].processDocumentations[].id").description("Id of process documentation").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].description").description("Description of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].frequency").description("Frequency of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].link").description("Client link of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction").description("Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].processDocumentations[].businessFunction.id").description("Id of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction.link").description("Link of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction.localId").description("Local id of Business Function (GSBPM sub-phase number) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram").description("Statistical Program being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.id").description("Id of Statistical Program being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.name").description("Name of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.acronym").description("Acronym of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.description").description("Description of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.link").description("Link of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].maintainers[]").description("Maintainer of Process for statistical program, usually the responsible DIVISION agent").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].processDocumentations[].maintainers[].id").description("Id of the maintainer agent of the process for statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].maintainers[].name").description("Name of the maintainer agent of the process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].maintainers[].type").description("Type of maintainer agent of the process for statistical program, usually DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].maintainers[].link").description("Client link of contact agent of the process for statistical program").type(JsonFieldType.STRING)




                        ))).andReturn();
    }

    @Test
    public void getStatisticalProgramVersions() throws Exception {
        final GetStatisticalProgramsQuery query = GetStatisticalProgramsQuery.create(Language.ENG);
        query.setLocalId("lfs");
        query.getRead().setData(DTOList.create(statisticalProgram()));
        when(iaisGateway.sendQuery(any(GetStatisticalProgramsQuery.class), anyString())).thenReturn(query);
        mockMvc.perform(get("/api/v1/referential/statistical/programs/{local_id}/versions", "lfs")
                .param("language", "en")
                .param("name", "Labor")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<GetStatisticalProgramsQuery> argumentCaptor = ArgumentCaptor.forClass(GetStatisticalProgramsQuery.class);
        verify(iaisGateway).sendQuery(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentGetStatisticalProgramVersions() throws Exception{
        final GetStatisticalProgramsQuery query = GetStatisticalProgramsQuery.create("Labor", null, Language.ENG);
        query.getRead().setData(DTOList.create(statisticalProgram()));
        when(iaisGateway.sendQuery(any(GetStatisticalProgramsQuery.class), anyString())).thenReturn(query);
        mockMvc.perform(RestDocumentationRequestBuilders.get("/api/v1/referential/statistical/programs/{local_id}/versions", "lfs")
                .param("language", "en")
                .param("name", "Labor"))
                .andDo(document("get-statistical-program-versions",
                        pathParameters(parameterWithName("local_id").description("Local id of the statistical program")),
                        requestParameters(parameterWithName("language").description("language to get the result"),
                                parameterWithName("name").description("The name to search with").optional()),
                        responseFields(
                                fieldWithPath("[]").description("List of business functions").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].id").description("The id of requested statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].name").description("Name of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].description").description("Description or the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].acronym").description("Acronym of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the requested statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].version").description("Version of statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].localId").description("The local id of the statistical program"),
                                fieldWithPath("[].budget").description("Budget of statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].dateInitiated").description("The initiated date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].dateEnded").description("The ended date of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].sourceOfFunding").description("Source of Funding of the statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].link").description("Client link of the entity").type(JsonFieldType.STRING),
                                fieldWithPath("[].programStatus").description("Status of the statistical program: CURRENT, COMPLETED, ").type(JsonFieldType.STRING),
                                fieldWithPath("[].contact").description("Contact agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].contact.id").description("id of the contact agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].contact.name").description("Name of the contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].contact.type").description("Type of contact agent, normally INDIVIDUAL").type(JsonFieldType.STRING),
                                fieldWithPath("[].contact.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].owner").description("Owner agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].owner.id").description("Id of the owner agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].owner.name").description("Name of the owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].owner.type").description("Type of owner agent, normally ORGANIZATION").type(JsonFieldType.STRING),
                                fieldWithPath("[].owner.link").description("Client link of owner agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer").description("Maintainer agent of the statistical program").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].maintainer.id").description("Id of the maintainer agent").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].maintainer.name").description("Name of the maintainer agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer.type").description("Type of maintainer agent, normally DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("[].maintainer.link").description("Client link of contact agent").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[]").description("List of statistical standards of the statistical program").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].statisticalStandards[].id").description("Id of the statistical standard").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].statisticalStandards[].name").description("Name of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].description").description("Description of the statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].type").description("Type of statistical standard:  CLASSIFICATIONS, CONCEPTS, DEFINITIONS, METHODOLOGIES, PROCEDURES, RECOMMENDATIONS, FRAMEWORK").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].version").description("Version of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].link").description("Client link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].externalLink").description("External link of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].statisticalStandards[].localId").description("Local id of statistical standard").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[]").description("List of statistical standards of the legislative reference").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].legislativeReferences[].id").description("Id of the legislative reference").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].legislativeReferences[].name").description("Name of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].description").description("Description of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].type").description("Type of legislative reference:   REGULATION, LAW, CODE, GOVERNMENTAL_DECISION, AMENDMENT,").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].version").description("Version of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].link").description("Client link of legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].externalLink").description("The governmental website link of the law").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].approval").description("First approval date of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].legislativeReferences[].localId").description("Number of the legislative reference").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[]").description("List of process (GSBPM sub-phases) documentations").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].processDocumentations[].id").description("Id of process documentation").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].description").description("Description of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].frequency").description("Frequency of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].link").description("Client link of process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction").description("Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].processDocumentations[].businessFunction.id").description("Id of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction.link").description("Link of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction.localId").description("Local id of Business Function (GSBPM sub-phase number) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].businessFunction.name").description("Name of Business Function (GSBPM sub-phase) being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram").description("Statistical Program being documented").type(JsonFieldType.OBJECT),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.id").description("Id of Statistical Program being documented").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.name").description("Name of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.acronym").description("Acronym of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.description").description("Description of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].statisticalProgram.link").description("Link of Statistical Program being documented").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].maintainers[]").description("Maintainer of Process for statistical program, usually the responsible DIVISION agent").type(JsonFieldType.ARRAY),
                                fieldWithPath("[].processDocumentations[].maintainers[].id").description("Id of the maintainer agent of the process for statistical program").type(JsonFieldType.NUMBER),
                                fieldWithPath("[].processDocumentations[].maintainers[].name").description("Name of the maintainer agent of the process for statistical program").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].maintainers[].type").description("Type of maintainer agent of the process for statistical program, usually DIVISION").type(JsonFieldType.STRING),
                                fieldWithPath("[].processDocumentations[].maintainers[].link").description("Client link of contact agent of the process for statistical program").type(JsonFieldType.STRING))


                        )).andReturn();
    }
}

