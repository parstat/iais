package com.nbs.iais.ms.security.api;

import com.nbs.iais.ms.common.api.messaging.gateway.IAISGateway;
import com.nbs.iais.ms.common.enums.AccountRole;
import com.nbs.iais.ms.security.api.controllers.ApiSecurityOpen;
import com.nbs.iais.ms.security.common.messageing.commands.SigninCommand;
import com.nbs.iais.ms.security.common.messageing.commands.SignupCommand;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import static com.nbs.iais.ms.common.utils.DTOMocks.account;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.*;
import static org.springframework.restdocs.request.RequestDocumentation.parameterWithName;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(value = ApiSecurityOpen.class, excludeAutoConfiguration = {org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration.class,
        org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration.class})
@AutoConfigureRestDocs
public class ApiSecurityOpenTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IAISGateway iaisGateway;

    @Test
    public void signinTest() throws Exception {
        final SigninCommand signinCommand = SigninCommand.create("florian", "pass");
        signinCommand.getEvent().setData(account());

        when(iaisGateway.sendCommand(any(), anyString())).thenReturn(signinCommand);

        mockMvc.perform(post("/api/v1/security/signin")
                .param("username", signinCommand.getUsername())
                .param("password", signinCommand.getPassword())
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<SigninCommand> argumentCaptor = ArgumentCaptor.forClass(SigninCommand.class);
        verify(iaisGateway).sendCommand(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentSignin() throws Exception{
        final SigninCommand command = SigninCommand.create("username", "password");
        command.getEvent().setData(account());
        when(iaisGateway.sendCommand(any(), anyString())).thenReturn(command);
        mockMvc.perform(RestDocumentationRequestBuilders.post("/api/v1/security/signin")
                .param("username", "username")
                .param("password", "password"))
                .andDo(document("signin",
                        requestParameters(parameterWithName("username").description("Username of the user that is logging in"),
                                parameterWithName("password").description("Password of the user")),
                        responseFields(
                                fieldWithPath("id").description("The id of account").type(JsonFieldType.NUMBER),
                                fieldWithPath("username").description("Username of the account").type(JsonFieldType.STRING),
                                fieldWithPath("name").description("Full name of the account").type(JsonFieldType.STRING),
                                fieldWithPath("role").description("Role of the account").type(JsonFieldType.STRING),
                                fieldWithPath("email").description("Email of the account").type(JsonFieldType.STRING)


                        ))).andReturn();
    }

    @Test
    public void signupTest() throws Exception {
        final SignupCommand signupCommand = SignupCommand.create("florian", "pass", "email", "Name Surname", AccountRole.USER);
        signupCommand.getEvent().setData(account());

        when(iaisGateway.sendCommand(any(), anyString())).thenReturn(signupCommand);

        mockMvc.perform(post("/api/v1/security/signup")
                .param("email", signupCommand.getEmail())
                .param("name", signupCommand.getName())
                .param("role", signupCommand.getRole().toString())
                .param("username", signupCommand.getUsername())
                .param("password", signupCommand.getPassword())
                .param("language", "en")
                .accept(MediaType.APPLICATION_JSON))
                .andDo(print()).andExpect(status().isOk());

        ArgumentCaptor<SignupCommand> argumentCaptor = ArgumentCaptor.forClass(SignupCommand.class);
        verify(iaisGateway).sendCommand(argumentCaptor.capture(), anyString());
    }

    @Test
    public void documentSignup() throws Exception{
        final SignupCommand signupCommand = SignupCommand.create("florian", "pass", "email", "Name Surname", AccountRole.USER);
        signupCommand.getEvent().setData(account());

        when(iaisGateway.sendCommand(any(), anyString())).thenReturn(signupCommand);

        when(iaisGateway.sendCommand(any(), anyString())).thenReturn(signupCommand);
        mockMvc.perform(RestDocumentationRequestBuilders.post("/api/v1/security/signup")
                .param("email", signupCommand.getEmail())
                .param("name", signupCommand.getName())
                .param("role", signupCommand.getRole().toString())
                .param("username", "username")
                .param("password", "password")
                .param("language", "en"))
                .andDo(document("signup",
                        requestParameters(parameterWithName("username").description("Username of the account being registered"),
                                parameterWithName("password").description("Password of the account being registered"),
                                parameterWithName("name").description("Full name of the account being registered"),
                                parameterWithName("email").description("Email of the account being registered"),
                                parameterWithName("role").description("Role of the user").optional(),
                                parameterWithName("language").description("Default user language")),
                        responseFields(
                                fieldWithPath("id").description("The id of account").type(JsonFieldType.NUMBER),
                                fieldWithPath("username").description("Username of the account").type(JsonFieldType.STRING),
                                fieldWithPath("name").description("Full name of the account").type(JsonFieldType.STRING),
                                fieldWithPath("role").description("Role of the account").type(JsonFieldType.STRING),
                                fieldWithPath("email").description("Email of the account").type(JsonFieldType.STRING),
                                fieldWithPath("status").description("Status of the user").type(JsonFieldType.STRING)


                        ))).andReturn();
    }
}
